/*
**************************************
* ICD10CM Vocabulary update. Part 2  *
* Version 0.0.6                      *
**************************************
*/

group 'com.sci.vocabulary'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

/*repositories {
    mavenLocal()
    mavenCentral()
}*/

/*dependencies {
    compile 'org.apache.poi:poi:3.9'
    compile 'org.apache.poi:poi-ooxml:3.9'
}*/

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.poi:poi:3.9'
        classpath 'org.apache.poi:poi-ooxml:3.9'
    }
}

/**
 * Auxiliary classes. TODO: Further should be used java-defined and compiled only
 */
public class StringBuilderWrapper implements java.lang.Appendable {
    private static final String IDENT_CHAR = " " *4
    private StringBuilder wrapped

    public StringBuilderWrapper() {
        wrapped = new StringBuilder()
    }
    public StringBuilderWrapper(String value) {
        this()
        wrapped.append(IDENT_CHAR).append(value)
    }

    @Override
    Appendable append(CharSequence csq) throws IOException {
        wrapped.append(IDENT_CHAR).append(csq)
        return this
    }
    @Override
    Appendable append(CharSequence csq, int start, int end) throws IOException {
        wrapped.append(IDENT_CHAR).append(csq, start, end)
        return this
    }
    @Override
    Appendable append(char c) throws IOException {
        wrapped.append(IDENT_CHAR).append(c)
        return this
    }
    @Override
    String toString() {
        return wrapped.toString()
    }
}

// Load ICD10CM properties
Properties props = new Properties()
props.load(new FileInputStream("$project.rootDir/Update_ICD10CM.properties"))
props.each {prop ->
    project.ext.set(prop.key, prop.value)
}
props.load(new FileInputStream("$project.rootDir/Update_ICD10CM_Part2.properties"))
props.each {prop ->
    project.ext.set(prop.key, prop.value)
}

def tempDir = File.createTempDir()
tempDir.deleteOnExit()

task prepareManualTable(description: project.properties['prepareTable.description']) << {
    println '\n\n*****************************************************'
    println '*                                                   *'
    println "*     '${description}' action started...      *"
    println '*                                                   *'
    println '*****************************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def logFile = "${tempDir.getPath()}\\${project.properties['prepareTable.logFileName']}"
    def streamLogFile = "${tempDir.getPath()}\\${project.properties['prepareTable.streamLogFileName']}"
    def streamErrorFile = "${tempDir.getPath()}\\${project.properties['prepareTable.streamErrFileName']}"

    def db = [un: project.properties['db.userName'],
              pw: project.properties['db.password'],
              tns: project.properties['db.tnsName'],
              sqlfile: "${project.properties['basePath']}\\${project.properties['prepareTable.sqlFileName']}",
              tableName: "${project.properties['manualTableName']}",
              logfile: logFile]
    def sout = new StringBuilderWrapper(), serr = new StringBuilderWrapper()
    def sqlplus = """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile} ${db.tableName}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    try {
        def fileFromLogFile = new File(logFile)
        // Write compact SQLPlus's spool log
        System.out.println(fileFromLogFile.getText())
    } catch (IOException ioe) {
        // Write whole SQLPlus's log
        System.out.println(sout.toString())
    }

    // Write to logfile
    File f = new File(streamLogFile)
    f.write(sout.toString())

    // Write to error file
    f = new File(streamErrorFile)
    f.write(serr.toString())

    // Get Manual Table from editors
    println new StringBuilderWrapper('\'Manual Table\' copy started...')
    def srcFile = "${project.properties['basePath']}\\${project.properties['prepareTable.manualWorkResultPath']}\\${project.properties['prepareTable.dataFileName']}"
    def dest = "${project.properties['basePath']}"
    copy {
        from srcFile
        into dest
    }
    println new StringBuilderWrapper('\'Manual Table\' copy done...')

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "Time elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

task importTable (dependsOn: prepareManualTable, description: project.properties['importTable.description']) << {
    println '\n\n*****************************************************'
    println '*                                                   *'
    println "*      '${description}' action started...      *"
    println '*                                                   *'
    println '*****************************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def dataFile = "${project.properties['basePath']}\\${project.properties['importTable.dataFileName']}"
    def logFile = "${tempDir.getPath()}\\${project.properties['importTable.logFileName']}"
    def discardFile = "${tempDir.getPath()}\\${project.properties['importTable.discardFileName']}"
    def badFile = "${tempDir.getPath()}\\${project.properties['importTable.badFileName']}"
    def streamLogFile = "${tempDir.getPath()}\\${project.properties['importTable.streamLogFileName']}"
    def streamErrorFile = "${tempDir.getPath()}\\${project.properties['importTable.streamErrFileName']}"

    def bosOut = new ByteArrayOutputStream(), bosErr = new ByteArrayOutputStream()
    def sout = new StringBuilderWrapper(), serr = new StringBuilderWrapper()

    exec {
        executable "sqlldr.exe"
        args "USERID=${project.properties['db.userName']}/${project.properties['db.password']}@${project.properties['db.tnsName']} " +
                "CONTROL=${project.properties['basePath']}\\${project.properties['importTable.controlFileName']} DATA=$dataFile LOG=$logFile DISCARD=$discardFile BAD=$badFile"
        standardOutput = bosOut
        errorOutput = bosErr
    }
    def bisOut = new ByteArrayInputStream(bosOut.toByteArray())
    bisOut.withReader { out->
        out.eachLine {
            sout.append(it).append('\n')
        }
    }
    def bisErr = new ByteArrayInputStream(bosErr.toByteArray())
    bisErr.withReader { out ->
        out.eachLine {
            serr.append(it).append('\n')
        }
    }

    // Write to console
    /*
     *  When import prefer to write stream log to console (it's shorter)
     * */
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(streamLogFile)
    f.write(sout.toString())

    // Write to error file
    f = new File(streamErrorFile)
    f.write(serr.toString())

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "Time elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will run 'Load stage' script.
 * Seems it's is specific for each vocabulary.
 */
task runLoadStage(dependsOn: importTable, description: project.properties['loadStage.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*    '${description}' action started...    *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def logFile = "${tempDir.getPath()}\\${project.properties['loadStage.logFileName']}"
    def streamLogFile = "${tempDir.getPath()}\\${project.properties['loadStage.streamLogFileName']}"
    def streamErrorFile = "${tempDir.getPath()}\\${project.properties['loadStage.streamErrFileName']}"

    def db = [un: project.properties['db.userName'],
              pw: project.properties['db.password'],
              tns: project.properties['db.tnsName'],
              sqlfile: "${project.properties['basePath']}\\${project.properties['loadStage.sqlFileName']}",
              logfile: logFile]
    def sout = new StringBuilderWrapper(), serr = new StringBuilderWrapper()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    try {
        def fileFromLogFile = new File(logFile)
        // Write compact SQLPlus's spool log
        System.out.println(fileFromLogFile.getText())
    } catch (IOException ioe) {
        // Write whole SQLPlus's log
        System.out.println(sout.toString())
    }

    // Write to logfile
    File f = new File(streamLogFile)
    f.write(sout.toString())

    // Write to error file
    f = new File(streamErrorFile)
    f.write(serr.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'].toBoolean() && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "Time elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will run 'Genetic update' script.
 * It's common for all updated vocabularies and located in '\Vocabulary-v5.0\working\generic_update.sql' file.
 */
task runGenericUpdate(dependsOn: runLoadStage, description: project.properties['genericUpdate.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*      '${description}' action started...     *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def logFile = "${tempDir.getPath()}\\${project.properties['genericUpdate.logFileName']}"
    def streamLogFile = "${tempDir.getPath()}\\${project.properties['genericUpdate.streamLogFileName']}"
    def streamErrorFile = "${tempDir.getPath()}\\${project.properties['genericUpdate.streamErrFileName']}"

    def db = [un: project.properties['db.userName'],
              pw: project.properties['db.password'],
              tns: project.properties['db.tnsName'],
              sqlfile: "${project.properties['basePath']}\\${project.properties['genericUpdate.sqlFileName']}",
              logfile: logFile]
    def sout = new StringBuilderWrapper(), serr = new StringBuilderWrapper()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    try {
        def fileFromLogFile = new File(logFile)
        // Write compact SQLPlus's spool log
        System.out.println(fileFromLogFile.getText())
    } catch (IOException ioe) {
        // Write whole SQLPlus's log
        System.out.println(sout.toString())
    }

    // Write to logfile
    File f = new File(streamLogFile)
    f.write(sout.toString())

    // Write to error file
    f = new File(streamErrorFile)
    f.write(serr.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'].toBoolean() && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "Time elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will run scripts which allows to see the vocabulary update results
 */
task checkUpdateResults(dependsOn: runGenericUpdate, description: project.properties['checkUpdateResults.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*   '${description}' action started...  *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def logFile = "${tempDir.getPath()}\\${project.properties['checkUpdateResults.logFileName']}"
    def streamLogFile = "${tempDir.getPath()}\\${project.properties['checkUpdateResults.streamLogFileName']}"
    def streamErrorFile = "${tempDir.getPath()}\\${project.properties['checkUpdateResults.streamErrFileName']}"

    def db = [un: project.properties['db.userName'],
              pw: project.properties['db.password'],
              tns: project.properties['db.tnsName'],
              sqlfile: "${project.properties['basePath']}\\${project.properties['checkUpdateResults.sqlFileName']}",
              logfile: logFile]
    def sout = new StringBuilderWrapper(), serr = new StringBuilderWrapper()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    try {
        def fileFromLogFile = new File(logFile)
        // Write compact SQLPlus's spool log
        System.out.println(fileFromLogFile.getText())
    } catch (IOException ioe) {
        // Write whole SQLPlus's log
        System.out.println(sout.toString())
    }

    // Write to logfile
    File f = new File(streamLogFile)
    f.write(sout.toString())

    // Write to error file
    f = new File(streamErrorFile)
    f.write(serr.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'].toBoolean() && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "Time elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * Bootstrap action
 *
 * TODO: Needs to find solution to measure whole task chain execution.
 * TODO: This one via doFirst/doLast actions isn't working.
 */
task startUpdate(dependsOn: checkUpdateResults, description: project.properties['startUpdate.description']) {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*      '${description}' action started...       *"
    println '*                                             *'
    println '***********************************************'

    println "Continue updating of '${project.properties['vocabulary.display.name']}' vocabulary..."

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    doLast {
        // Finish action checkpoint
        def timeFinish = System.currentTimeMillis()

        // Measure time execution
        def timeElapsed = (timeFinish - timeStart) / 1000
        println "\n\nTotal time elapsed: ${timeElapsed} seconds."
        println "Updating of '${project.properties['vocabulary.display.name']}' vocabulary completed successfully..."
        println '***********************************************'
        println '*                                             *'
        println "*      '${description}' action is done...       *"
        println '*                                             *'
        println '***********************************************\n'
    }
}