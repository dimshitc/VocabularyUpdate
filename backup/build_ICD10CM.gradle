group 'com.sci.vocabulary'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

/*repositories {
    mavenLocal()
    mavenCentral()
}*/

/*dependencies {
    compile 'org.apache.poi:poi:3.9'
    compile 'org.apache.poi:poi-ooxml:3.9'
}*/

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.poi:poi:3.9'
        classpath 'org.apache.poi:poi-ooxml:3.9'
    }
}

import groovy.io.FileType
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Workbook
import org.apache.poi.ss.usermodel.WorkbookFactory
import org.apache.poi.ss.usermodel.Sheet

/***
 * ICD10CM vocabulary update
 * Version 0.0.3
 */
def tempDir = File.createTempDir()
tempDir.deleteOnExit()

/**
 * Just renew user schema and prepare it for further vocabulary update
 */
task fastRecreateSchema(description: project.properties['icd10cm.fastRecreate.description']) << {
    println '\n***********************************************'
    println '*                                             *'
    println "*       '${description}' action started...     *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def log_file = "${tempDir.getPath()}\\${project.properties['icd10cm.fastRecreate.logFileName']}"
    def stream_log_file = "${tempDir.getPath()}\\${project.properties['icd10cm.fastRecreate.streamLogFileName']}"
    def stream_error_file = "${tempDir.getPath()}\\${project.properties['icd10cm.fastRecreate.streamErrFileName']}"

    def db = [un: project.properties['icd10cm.db.userName'],
              pw:  project.properties['icd10cm.db.password'],
              tns: project.properties['icd10cm.db.tnsName'],
              sqlfile: project.properties['icd10cm.fastRecreate.sqlFilePath'],
              logfile: log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(stream_log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(stream_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'] && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will prepare user schema for vocabulary update routine.
 * It will create auxiliary table - the "ICD10CM_TABLE" in our case, for example.
 */
task createSourceTable(dependsOn: fastRecreateSchema, description: project.properties['icd10cm.createSourceTable.description']) << {
    println '\n***********************************************'
    println '*                                             *'
    println "*   '${description}' action started...   *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def log_file = "${tempDir.getPath()}\\${project.properties['icd10cm.createSourceTable.logFileName']}"
    def stream_log_file = "${tempDir.getPath()}\\${project.properties['icd10cm.createSourceTable.streamLogFileName']}"
    def stream_error_file = "${tempDir.getPath()}\\${project.properties['icd10cm.createSourceTable.streamErrFileName']}"

    def db = [un: project.properties['icd10cm.db.userName'],
              pw: project.properties['icd10cm.db.password'],
              tns: project.properties['icd10cm.db.tnsName'],
              sqlfile: project.properties['icd10cm.createSourceTable.sqlFilePath'],
              logfile: log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(stream_log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(stream_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'] && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * Task which will download vocabulary update package from source host.
 * This one - 'ftp://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM' is our case.
 */
task downloadUpdatePack(dependsOn: createSourceTable, description: project.properties['icd10cm.downloadUpdatePack.description']) << {
    println '\n***********************************************'
    println '*                                             *'
    println "*       '${description}' action started...          *"
    println '*                                             *'
    println '***********************************************'

    /* Downloading file */
    // Start action checkpoint
    def timeStart = System.currentTimeMillis()
    println '\tDownloading file'
    println "\t\tStored to: ${tempDir.getPath()}"
    ant.get(src: project.properties['icd10cm.downloadUpdatePack.fileUrl'], dest: tempDir, verbose: true)
    println '\tDownload completed...'

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}
/**
 * Task will rename the file 'icd10cm_order_20xx.txt' to the 'icd10cm.txt'.
 */
task renameFile(dependsOn: downloadUpdatePack, description: project.properties['icd10cm.renameFile.description']) << {
    println '\n***********************************************'
    println '*                                             *'
    println "*       '${description}' action started...       *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()
    def timeFinish = timeStart

    def oldFilePath = "${tempDir.getPath()}\\${project.properties['icd10cm.renameFile.srcFileName']}"
    def newFilePath = "${tempDir.getPath()}\\${project.properties['icd10cm.renameFile.destFileName']}"

    File fOld = new File(oldFilePath)
    File fNew = new File(newFilePath)

    if (fNew.exists()) {
        throw new IOException(String.format(project.properties['icd10cm.renameFile.error.already.exists'], newFilePath))
    }

    boolean isSuccess = fOld.renameTo(fNew);

    if (isSuccess) {
        println 'Renamed successfully'

        // Finish action checkpoint
        timeFinish = System.currentTimeMillis()

    } else {
        println project.properties['icd10cm.renameFile.error.other']
        throw new GradleException(String.format(project.properties['error.message'], name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * Task performed import CSV data to database
 */
task importData(dependsOn: renameFile, description: project.properties['icd10cm.import.description']) << {
    println '\n***********************************************'
    println '*                                             *'
    println "*        '${description}' action started...           *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def dataFile = "${tempDir.getPath()}\\${project.properties['icd10cm.importData.dataFileName']}"
    def logFile = "${tempDir.getPath()}\\${project.properties['icd10cm.importData.logFileName']}"
    def discardFile = "${tempDir.getPath()}\\${project.properties['icd10cm.importData.discardFileName']}"
    def badFile = "${tempDir.getPath()}\\${project.properties['icd10cm.importData.badFileName']}"

    exec {
        executable "sqlldr.exe"
        args "USERID=${project.properties['icd10cm.db.userName']}/${project.properties['icd10cm.db.password']}@${project.properties['icd10cm.db.tnsName']} " +
                "CONTROL=${project.properties['icd10cm.import.controlFilePath']} DATA=$dataFile LOG=$logFile DISCARD=$discardFile BAD=$badFile"
    }

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will run 'Load stage' script.
 * Seems it's is specific for each vocabulary.
 */
task runLoadStage(dependsOn: importData, description: project.properties['icd10cm.loadStage.description']) << {
    println '\n***********************************************'
    println '*                                             *'
    println "*        '${description}' action started...       *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def log_file = "${tempDir.getPath()}\\${project.properties['icd10cm.loadStage.logFileName']}"
    def stream_log_file = "${tempDir.getPath()}\\${project.properties['icd10cm.loadStage.streamLogFileName']}"
    def stream_error_file = "${tempDir.getPath()}\\${project.properties['icd10cm.loadStage.streamErrFileName']}"

    def db = [un: project.properties['icd10cm.db.userName'],
              pw: project.properties['icd10cm.db.password'],
              tns: project.properties['icd10cm.db.tnsName'],
              sqlfile: project.properties['icd10cm.loadStage.sqlFilePath'],
              logfile: log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(stream_log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(stream_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'] && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will run 'Genetic update' script.
 * It's common for all updated vocabularies and located in '\Vocabulary-v5.0\working\generic_update.sql' file.
 */
task runGenericUpdate(dependsOn: runLoadStage, description: project.properties['icd10cm.genericUpdate.description']) << {
    println '\n***********************************************'
    println '*                                             *'
    println "*      '${description}' action started...     *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def log_file = "${tempDir.getPath()}\\${project.properties['icd10cm.genericUpdate.logFileName']}"
    def stream_log_file = "${tempDir.getPath()}\\${project.properties['icd10cm.genericUpdate.streamLogFileName']}"
    def stream_error_file = "${tempDir.getPath()}\\${project.properties['icd10cm.genericUpdate.streamErrFileName']}"

    def db = [un: project.properties['icd10cm.db.userName'],
              pw: project.properties['icd10cm.db.password'],
              tns: project.properties['icd10cm.db.tnsName'],
              sqlfile: project.properties['icd10cm.genericUpdate.sqlFilePath'],
              logfile: log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(stream_log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(stream_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'] && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will run scripts which allows to see the vocabulary update results
 */
task checkUpdateResults(dependsOn: runGenericUpdate, description: project.properties['icd10cm.checkUpdateResults.description']) << {
    println '\n***********************************************'
    println '*                                             *'
    println "*   '${description}' action started...  *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def log_file = "${tempDir.getPath()}\\${project.properties['icd10cm.checkUpdateResults.logFileName']}"
    def stream_log_file = "${tempDir.getPath()}\\${project.properties['icd10cm.checkUpdateResults.streamLogFileName']}"
    def stream_error_file = "${tempDir.getPath()}\\${project.properties['icd10cm.checkUpdateResults.streamErrFileName']}"

    def db = [un: project.properties['icd10cm.db.userName'],
              pw: project.properties['icd10cm.db.password'],
              tns: project.properties['icd10cm.db.tnsName'],
              sqlfile: project.properties['icd10cm.checkUpdateResults.sqlFilePath'],
              logfile: log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(stream_log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(stream_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'] && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * Bootstrap action
 */
task startUpdate(dependsOn: checkUpdateResults, description: project.properties['icd10cm.startUpdate.description']) {
    // Start action checkpoint
    def timeStart

    doFirst {
        timeStart = System.currentTimeMillis()
    }
    doLast {
        // Finish action checkpoint
        def timeFinish = System.currentTimeMillis()

        // Measure time execution
        def timeElapsed = (timeFinish - timeStart) / 1000
        println "Total time elapsed: ${timeElapsed} seconds."
    }
}