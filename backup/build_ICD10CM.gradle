group 'com.sci.vocabulary'
group 'com.sci.vocabulary'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

/*repositories {
    mavenLocal()
    mavenCentral()
}*/

/*dependencies {
    compile 'org.apache.poi:poi:3.9'
    compile 'org.apache.poi:poi-ooxml:3.9'
}*/

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.poi:poi:3.9'
        classpath 'org.apache.poi:poi-ooxml:3.9'
    }
}

import groovy.io.FileType
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Workbook
import org.apache.poi.ss.usermodel.WorkbookFactory
import org.apache.poi.ss.usermodel.Sheet

/***
 * ICD10CM vocabulary update
 * Version 0.0.2
 */

def fileUrl = 'ftp://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2017/icd10cm_order_2017.txt'
def tempDir = File.createTempDir()
def oldFileName = 'icd10cm_order_2017.txt'
def newFileName = 'icd10cm.txt'

/**
 * This is an auxiliary task. It just renew user schema and prepare it for further vocabulary update
 */
task fastRecreateSchema << {
    println '\n***********************************************'
    println '*                                             *'
    println '*       \'Fast recreate\' action started...     *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def _log_file = path + '\\fast_recreate.log'
    def _error_file = path + '\\fast_recreate.err'

    def db = [un : 'DEV_ICD10CM', pw :'DEV_ICD10CM',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\00.fast_recreate_schema.sql', logfile: _log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to logfile
    File f = new File(_log_file)
    f.write(sout.toString())

    // Write to console
    System.out.println(sout.toString())

    // Write to error file
    f = new File(_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0)) {
        throw new GradleException("Error with code ${sqlplus.exitValue()} occured when \'${name}\' executed...")
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Fast recreate\' action done ***'
}

/**
 * This task will prepare user schema for vocabulary update routine.
 * It will create auxiliary table - the "ICD10CM_TABLE" in our case, for example.
 */
task createSourceTable(dependsOn: fastRecreateSchema) << {
    println '\n***********************************************'
    println '*                                             *'
    println '*   \'Create source table\' action started...   *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def _log_file = path + '\\create_source_table.log'
    def _error_file = path + '\\create_source_table.err'

    def db = [un : 'DEV_ICD10CM', pw :'DEV_ICD10CM',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\01.create_source_tables.sql', logfile: _log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to logfile
    File f = new File(_log_file)
    f.write(sout.toString())

    // Write to console
    System.out.println(sout.toString())

    // Write to error file
    f = new File(_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0)) {
        throw new GradleException("Error with code ${sqlplus.exitValue()} occured when \'${name}\' executed...")
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Create source table\' action done ***'
}

/**
 * Task which will download vocabulary update package from source host.
 * This one - 'ftp://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM' is our case.
 */
task downloadUpdatePack(dependsOn: createSourceTable) << {
    println '\n***********************************************'
    println '*                                             *'
    println '*       \'Download\' action started...          *'
    println '*                                             *'
    println '***********************************************'

    /* Downloading file */
    // Start action checkpoint
    def timeStart = System.currentTimeMillis()
    println '\tDownloading file'
    println '\t\tStored to: ' + tempDir.getPath()
    ant.get(src: fileUrl, dest: tempDir, verbose: true)
    println '\tDownload completed...'

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Download\' action done ***'
}
/**
 * Task will rename the file 'icd10cm_order_20xx.txt' to the 'icd10cm.txt'.
 */
task renameFile(dependsOn: downloadUpdatePack) << {
    println '\n***********************************************'
    println '*                                             *'
    println '*       \'Rename file\' action started...       *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()
    def timeFinish = timeStart

    def path = tempDir.getPath()
    File fOld = new File(path + "\\" + oldFileName)
    File fNew = new File(path + "\\" + newFileName)

    if (fNew.exists()) {
        throw new IOException("File '$newFileName' already exists!")
    }

    boolean isSuccess = fOld.renameTo(fNew);

    if (isSuccess) {
        println 'Renamed successfully'

        // Finish action checkpoint
        timeFinish = System.currentTimeMillis()

    } else {
        println 'Something going wrong, please check temporary folder'
        throw new GradleException('Error occurred when "Renaming file" executed...')
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Rename file\' action done ***'
}

/**
 * Task performed import CSV data to database
 */
task importData(dependsOn: renameFile) << {
    println '\n***********************************************'
    println '*                                             *'
    println '*        \'Import\' action started...           *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def userName = 'DEV_ICD10CM'
    def password = 'DEV_ICD10CM'
    def controlFile = 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\icd10cm.ctl'
    def dataFile = path + "\\" + newFileName
    def logFile = path + "\\" + "icd10cm.log"
    def discardFile = path + "\\" + "icd10cm.dsc"

    exec {
        executable "sqlldr.exe"
        args "USERID=$userName/$password@ORCL CONTROL=$controlFile DATA=$dataFile LOG=$logFile DISCARD=$discardFile"
    }

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Import\' action done ***'
}

/**
 * This task will run 'Load stage' script.
 * Seems it's is specific for each vocabulary.
 */
task runLoadStage(dependsOn: importData) << {
    println '\n***********************************************'
    println '*                                             *'
    println '*        \'Load stage\' action started...       *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def _log_file = path + '\\load_stage.log'
    def _error_file = path + '\\load_stage.err'

    def db = [un : 'DEV_ICD10CM', pw :'DEV_ICD10CM',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\03.load_stage.sql', logfile: _log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to logfile
    File f = new File(_log_file)
    f.write(sout.toString())

    // Write to console
    System.out.println(sout.toString())

    // Write to error file
    f = new File(_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0)) {
        throw new GradleException("Error with code ${sqlplus.exitValue()} occured when \'${name}\' executed...")
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Load stage\' action done ***'
}

/**
 * This task will run 'Genetic update' script.
 * It's common for all updated vocabularies and located in '\Vocabulary-v5.0\working\generic_update.sql' file.
 */
task runGenericUpdate(dependsOn: runLoadStage) << {
    println '\n***********************************************'
    println '*                                             *'
    println '*      \'Generic update\' action started...     *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def _log_file = path + '\\generic_update.log'
    def _error_file = path + '\\generic_update.err'

    def db = [un : 'DEV_ICD10CM', pw :'DEV_ICD10CM',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\04.generic_update.sql', logfile: _log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to logfile
    File f = new File(_log_file)
    f.write(sout.toString())

    // Write to console
    System.out.println(sout.toString())

    // Write to error file
    f = new File(_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0)) {
        throw new GradleException("Error with code ${sqlplus.exitValue()} occured when \'${name}\' executed...")
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Generic update\' action done ***'
}

/**
 * This task will run scripts which allows to see the vocabulary update results
 */
task checkUpdateResults(dependsOn: runGenericUpdate) << {
    println '\n***********************************************'
    println '*                                             *'
    println '*   \'Check update results\' action started...  *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def _log_file = path + '\\update_results.log'
    def _error_file = path + '\\update_results.err'

    def db = [un : 'DEV_ICD10CM', pw :'DEV_ICD10CM',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\05.update_results.sql', logfile: _log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to logfile
    File f = new File(_log_file)
    f.write(sout.toString())

    // Write to console
    System.out.println(sout.toString())

    // Write to error file
    f = new File(_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0)) {
        throw new GradleException("Error with code ${sqlplus.exitValue()} occured when \'${name}\' executed...")
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Check update results\' action done ***'
}

/**
 * Bootstrap action
 */
task startUpdate(dependsOn: checkUpdateResults) {
    // Start action checkpoint
    def timeStart

    doFirst {
        timeStart = System.currentTimeMillis()
    }
    doLast {
        // Finish action checkpoint
        def timeFinish = System.currentTimeMillis()

        // Measure time execution
        def timeElapsed = timeFinish - timeStart
        println 'Total time elapsed: ' + timeElapsed / 1000 + ' in seconds.'
    }
}