group 'com.sci.vocabulary'
group 'com.sci.vocabulary'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

/*repositories {
    mavenLocal()
    mavenCentral()
}*/

/*dependencies {
    compile 'org.apache.poi:poi:3.9'
    compile 'org.apache.poi:poi-ooxml:3.9'
}*/

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.poi:poi:3.9'
        classpath 'org.apache.poi:poi-ooxml:3.9'
    }
}

import groovy.io.FileType
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Workbook
import org.apache.poi.ss.usermodel.WorkbookFactory
import org.apache.poi.ss.usermodel.Sheet

/***
 * Vocabulary update
 * Version 0.0.2
 */

def fileUrl = 'https://www.cms.gov/Medicare/Coding/HCPCSReleaseCodeSets/Downloads/2017-Alpha-Numeric-HCPCS-File.zip'
def tempDir = File.createTempDir()
def inputFile = tempDir.getPath() + "\\" + "HCPC17_CONTR_ANWEB.xlsx"
def outputFile = tempDir.getPath() + "\\" + "ANWEB_V2.csv"

/**
 * This is an auxiliary task. It just renew user schema and prepare it for further vocabulary update
 */
task fastRecreateSchema << {
    println '\n***********************************************'
    println '*                                             *'
    println '*       \'Fast recreate\' action started...     *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def _log_file = path + '\\fast_recreate.log'
    def _error_file = path + '\\fast_recreate.err'

    def db = [un : 'DEV_HCPCS_TEMP', pw :'DEV_HCPCS_TEMP',tns :'ORCL', sqlfile: 'E:\\Vocabulary-v5.0\\working\\fast_recreate_schema.sql', logfile: _log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} >${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    File f = new File(_log_file)
    f.write(sout.toString())

    f = new File(_error_file)
    f.write(sout.toString())

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    if (serr != null && serr.toString().length() > 0) {
        throw new GradleException('Error occurred when \'Fast recreate\' executed...')
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Fast recreate\' action done ***'
}

/**
 * This task will prepare user schema for vocabulary update routine.
 * It will create auxiliary table - the "ANWEB_V2" in our case, for example.
 */
task createSourceTable << {
    println '\n***********************************************'
    println '*                                             *'
    println '*   \'Create source table\' action started...   *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def _log_file = path + '\\create_source_table.log'
    def _error_file = path + '\\create_source_table.err'

    def db = [un : 'DEV_HCPCS_TEMP', pw :'DEV_HCPCS_TEMP',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\00.create_source_tables.sql']
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} >${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    File f = new File(_log_file)
    f.write(sout.toString())

    f = new File(_error_file)
    f.write(sout.toString())

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    if (serr != null && serr.toString().length() > 0) {
        throw new GradleException('Error occurred when \'Create source table\' executed...')
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Create source table\' action done ***'
}

/**
 * Task which will download vocabulary update package from source host.
 * This one - 'http://www.cms.gov/Medicare/Coding/HCPCSReleaseCodeSets/' is our case.
 */
task downloadUpdatePack() << {
    println '\n***********************************************'
    println '*                                             *'
    println '*        'Download' action started...         *'
    println '*                                             *'
    println '***********************************************'

    /* Downloading file */
    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    println '\tDownloading file...'
    println '\t\tStored to: ' + tempDir.getPath()
    ant.get(src: fileUrl, dest: tempDir, verbose: true)
    println '\tDownload completed'

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Download\' action done ***'
}

task extractFiles() << {
    println '\n***********************************************'
    println '*                                             *'
    println '*        \'Extract\' action started...          *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    /* Extracting file */
    def fileList = []
    def dir = tempDir
    dir.eachFile(FileType.FILES) { file ->
        fileList << file
        if (file.getPath().endsWith('zip')) {
            ant.unzip(src: file.getPath(), dest: tempDir, overwrite: false)
            println('\t\tunzipped...')
        }
    }

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Extract\' action done ***'
}

/**
 * This task will convert a XLS data file to CSV format.
 */
task xls2Csv << {
    println '\n***********************************************'
    println '*                                             *'
    println '*        \'Convert\' action started...          *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()
    def timeFinish = timeStart

    // For storing data into CSV files
    StringBuffer data = new StringBuffer();
    try {
        FileOutputStream fos = new FileOutputStream(outputFile);

        // Get the workbook object for XLS file
        Workbook workbook = WorkbookFactory.create(new FileInputStream(inputFile));
        // Get first sheet from the workbook
        Sheet sheet = workbook.getSheetAt(0);
//        Cell cell;
//        Row row;

        for (int i = 0; i < sheet.getLastRowNum(); i++){
            Row row = sheet.getRow(i);

            if (row!= null){
                for (int j = 0; j < row.getLastCellNum(); j++){
                    Cell cell = row.getCell(j);
                    if (cell == null){
                        data.append(";");
                    } else {
                        cell.setCellType(Cell.CELL_TYPE_STRING)
                        data.append("\"" + cell. toString().trim().replaceAll("\"", "'") + "\"" + ";");
//                        switch (cell.getCellType()) {
//                            case Cell.CELL_TYPE_BOOLEAN:
//                                data.append("\"" + cell.getBooleanCellValue() + "\"" + ";");
//                                break;
//
//                            case Cell.CELL_TYPE_NUMERIC:
//                                data.append("\"" + cell.cgetNumericCellValue() + "\"" + ";");
//                                break;
//
//                            case Cell.CELL_TYPE_STRING:
////                                if (!cell.getStringCellValue().contains("\"")){
//                                println cell.toString()
//                                    data.append("\"" + cell.getStringCellValue().trim().replaceAll("\"", "'") + "\"" + ";");
////                                } else {
////                                    data.append(";");
////                                }
//                                break;
//
//                            case Cell.CELL_TYPE_BLANK:
//                                data.append("" + ";");
//                                break;
//
//                            default:
//                                data.append(cell + ";");
//                        }



                    }
                }
                data.append('\n');
            } else {

            }
        }

        // Iterate through each rows from first sheet
//        Iterator<Row> rowIterator = sheet.iterator();
//        while (rowIterator.hasNext()) {
//            row = rowIterator.next();
//            // For each row, iterate through each columns
//            Iterator<Cell> cellIterator = row.cellIterator();
//            while (cellIterator.hasNext()) {
//                cell = cellIterator.next();
//
//                switch (cell.getCellType()) {
//                    case Cell.CELL_TYPE_BOOLEAN:
//                        data.append("\"" + cell.getBooleanCellValue() + "\"" + ";");
//                        break;
//
//                    case Cell.CELL_TYPE_NUMERIC:
//                        data.append("\"" + cell.getNumericCellValue() + "\"" + ";");
//                        break;
//
//                    case Cell.CELL_TYPE_STRING:
//                        data.append("\"" + cell.getStringCellValue().trim() + "\"" + ";");
//                        break;
//
//                    case Cell.CELL_TYPE_BLANK:
//                        data.append("" + ";");
//                        break;
//
//                    default:
//                        data.append(cell + ";");
//                }
//
//            }
//
//        }

        fos.write(data.toString().getBytes());
        fos.close();

        // Finish action checkpoint
        timeFinish = System.currentTimeMillis()

    }
    catch (FileNotFoundException e) {
        e.printStackTrace();
    }
    catch (IOException e) {
        e.printStackTrace();
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Convert\' action done ***'
}

/*
task task1(type:Exec) {
    commandLine 'sqlldr.exe'
}
*/

/**
 * Task performed import CSV data to database
 */
task importData << {
    println '\n***********************************************'
    println '*                                             *'
    println '*         \'Import\' action started...          *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def userName = 'DEV_HCPCS_TEMP'
    def password = 'DEV_HCPCS_TEMP'
    def controlFile = 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\2016-Alpha-Numeric-HCPCS-File\\ANWEB_V2.ctl'
    def dataFile = path + "\\" + "ANWEB_V2.csv"
    def logFile = path + "\\" + "ANWEB_V2.log"
    def discardFile = path + "\\" + "ANWEB_V2.dsc"

    exec {
        executable "sqlldr.exe"
        args "USERID=$userName/$password@ORCL CONTROL=$controlFile DATA=$dataFile LOG=$logFile DISCARD=$discardFile"
    }

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    //commandLine "sqlldr.exe"

//    args "USERID=$userName/$password CONTROL=$controlFile DATA=$dataFile LOG=$logFile DISCARD=$discardFile"

/*    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
*/
    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Import\' action done ***'
}

/**
 * This task will run 'Load stage' script.
 * Seems it's is specific for each vocabulary.
 */
task runLoadStage << {
    println '\n***********************************************'
    println '*                                             *'
    println '*        \'Load stage\' action started...       *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def _log_file = path + '\\load_stage.log'
    def _error_file = path + '\\load_stage.err'

    def db = [un : 'DEV_HCPCS_TEMP', pw :'DEV_HCPCS_TEMP',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\02.load_stage.sql ', logfile: _log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} >${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    File f = new File(_log_file)
    f.write(sout.toString())

    f = new File(_error_file)
    f.write(sout.toString())

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    if (serr != null && serr.toString().length() > 0) {
        throw new GradleException('Error occurred when \'Load stage\' executed...')
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

/*
    def userName = 'DEV_HCPCS_TEMP'
    def password = 'DEV_HCPCS_TEMP'
    def logFile = path + "\\load_stage.log"
    println "1) ###" + logFile
    def loadStageFile = 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\test1.sql'

    exec {
        println "5) !!!!!!!!!!!!!" + Thread.currentThread().getId()
        executable "sqlplus.exe"
        args "$userName/$password@orcl @$loadStageFile"
        println "1) %%%" + args
    }
*/
    println '*** \'Load stage\' action done ***'
}

/**
 * This task will run 'Genetic update' script.
 * It's common for all updated vocabularies and located in '\Vocabulary-v5.0\working\generic_update.sql' file.
 */
task runGenericUpdate << {
    println '\n***********************************************'
    println '*                                             *'
    println '*     \'Generic update\' action started...      *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def _log_file = path + '\\generic_update.log'
    def _error_file = path + '\\generic_update.err'

    def db = [un : 'DEV_HCPCS_TEMP', pw :'DEV_HCPCS_TEMP',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\03.generic_update.sql', logfile: _log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} >${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    File f = new File(_log_file)
    f.write(sout.toString())

    f = new File(_error_file)
    f.write(sout.toString())

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    if (serr != null && serr.toString().length() > 0) {
        throw new GradleException('Error occurred when \'Generic update\' executed...')
    }

/*
    def path = tempDir.getPath()
    def userName = 'DEV_HCPCS_TEMP'
    def password = 'DEV_HCPCS_TEMP'
    def logFile = path + "\\generic_update.log"
    println "2) ###" + logFile
    def $genericUpdateFile = "E:\\Vocabulary_Data\\DEV_HCPCS\\update\\test2.sql"

    exec {
        println "6) !!!!!!!!!!!!!" + Thread.currentThread().getId()
        executable "sqlplus.exe"
        args "$userName/$password@orcl @$genericUpdateFile"
        println "2) %%%" + args
    }
*/
    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Generic update\' action done ***'
}

/**
 * This task will run scripts which allows to see the vocabulary update results
 */
task checkUpdateResults << {
    println '\n***********************************************'
    println '*                                             *'
    println '*  \'Check update results\' action started...   *'
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def path = tempDir.getPath()
    def _log_file = path + '\\update_results.log'
    def _error_file = path + '\\update_results.err'

    def db = [un : 'DEV_HCPCS_TEMP', pw :'DEV_HCPCS_TEMP',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\04.update_results.sql', logfile: _log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} >${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    File f = new File(_log_file)
    f.write(sout.toString())

    f = new File(_error_file)
    f.write(sout.toString())

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    if (serr != null && serr.toString().length() > 0) {
        throw new GradleException('Error occurred when \'Check update results\' executed...')
    }

    // Measure time execution
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'

    println '*** \'Check update results\' action done ***'
}

/**
 * Bootstrap action
 */
task startUpdate

/*task runLoadStage(type: Exec) {
    def path = tempDir.getPath()
    def userName = 'DEV_HCPCS_TEMP'
    def password = 'DEV_HCPCS_TEMP'
    def loadStageFile = 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\02.load_stage.sql'
    def logFile = path + "load_stage.log"

    workDir = tempDir

    commandLine = "sqlplus /nolog $userName/$password @$loadStageFile > $logFile"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}

task runGenericUpdate(type: Exec) {
    def path = tempDir.getPath()
    def userName = 'DEV_HCPCS_TEMP'
    def password = 'DEV_HCPCS_TEMP'
    def genericUpdateFile = 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\02.load_stage.sql'
    def logFile = path + "generic_update.log"

    workDir = tempDir

    commandLine = "sqlplus /nolog $userName/$password @$genericUpdateFile > $logFile"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}*/

/*
    FileInputStream fis = new FileInputStream(filename);
    Workbook wb = new XSSFWorkbook(fis);
    Sheet sheet = wb.getSheetAt(0);
    for (Row row : sheet) {
        for (Cell cell : row) {
            doSomething(cell.toString())
        }

    }
*/

/**
 * Defines action order
 */
createSourceTable.dependsOn fastRecreateSchema
downloadUpdatePack.dependsOn createSourceTable
extractFiles.dependsOn downloadUpdatePack
xls2Csv.dependsOn extractFiles
importData.dependsOn xls2Csv
runLoadStage.dependsOn importData
runGenericUpdate.dependsOn runLoadStage
checkUpdateResults.dependsOn runGenericUpdate
startUpdate.dependsOn checkUpdateResults
