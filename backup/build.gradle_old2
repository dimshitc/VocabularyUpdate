group 'com.sci.vocabulary'
group 'com.sci.vocabulary'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

/*repositories {
    mavenLocal()
    mavenCentral()
}*/

/*dependencies {
    compile 'org.apache.poi:poi:3.9'
    compile 'org.apache.poi:poi-ooxml:3.9'

	compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':material-intro') // add this line to compile some project (for multi-project config)
}*/

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.poi:poi:3.9'
        classpath 'org.apache.poi:poi-ooxml:3.9'
    }
}

import groovy.io.FileType
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Workbook
import org.apache.poi.ss.usermodel.WorkbookFactory
import org.apache.poi.ss.usermodel.Sheet


/***
 * HCPCS vocabulary update
 * Version 0.0.3
 */
def tempDir = File.createTempDir()
tempDir.deleteOnExit()

/**
 * It just renew user schema and prepare it for further vocabulary update
 */
task fastRecreate << {
    println '/**                               '
    println '*  "Fast Recreate" Action   '
    println '**/                               '

    def log_file = "$tempDir.path\\${project.properties['hcpcs.fastRecreate.logFileName']}"
    def error_file = "$tempDir.path\\${project.properties['hcpcs.fastRecreate.errFileName']}"

    def db = [un: project.properties['hcpcs.db.userName'], pw: project.properties['hcpcs.db.password'], tns: project.properties['hcpcs.db.tnsName'],
              sqlfile: project.properties['hcpcs.fastRecreate.sqlFilePath']]
    println "100) *** $log_file $error_file".toString()

    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    println "1) ### ${sqlplus.exitValue()}"
    println "out> $sout err> $serr"

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0)) {
        throw new GradleException(String.format(project.properties['error.message'], sqlplus.exitValue(), name))
    }
}

/**
 * Prepare vocabulary update by creating source table
 */
task createSourceTable(dependsOn: fastRecreate) << {
    println '/**                               '
    println '*  "Create source table" Action   '
    println '**/                               '

    def log_file = "$tempDir.path\\${project.properties['hcpcs.createSourceTable.logFileName']}"
    def error_file = "$tempDir.path\\${project.properties['hcpcs.createSourceTable.errFileName']}"

    def db = [un: project.properties['hcpcs.db.userName'], pw: project.properties['hcpcs.db.password'], tns: project.properties['hcpcs.db.tnsName'],
              sqlfile: project.properties['hcpcs.createSourceTable.sqlFilePath']]
    println "100) *** $log_file $error_file".toString()

    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    println "1) ### ${sqlplus.exitValue()}"
    println "out> $sout err> $serr"

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0)) {
        throw new GradleException(String.format($project.properties['error.message'], sqlplus.exitValue(), name))
    }
}

/**
 * Download vocabulary update pack
 */
task downloadUpdatePack(dependsOn: createSourceTable) << {
    println '/**                  '
    println '*  "Download" Action   '
    println '**/                  '

    /* Downloading file */
    def timeStart = System.currentTimeMillis()
    println '\tDownloading file...'
    println "\t\tStored to: $tempDir.path"
    ant.get(src: project.properties['hcpcs.downloadUpdatePack.fileUrl'], dest: tempDir, verbose: true)
    println '\tDownload completed...'

    def timeFinish = System.currentTimeMillis()
    def timeElapsed = (timeFinish - timeStart)/1000
    println "\tTime elapsed: $timeElapsed in seconds."
}

task extractFiles(dependsOn: downloadUpdatePack) << {
    println '/**                  ' +
            '*  "Extract" Action   ' +
            '**/                  '

    /* Extracting file */
    def fileList = []
    tempDir.eachFile(FileType.FILES) { file ->
        fileList << file
        if (file.getPath().endsWith('zip')) {
            ant.unzip(src: file.getPath(), dest: tempDir, overwrite: false)
            println('\t\tunzipped...')
        }
    }
}

/**
 * Convert from Microsoft Excel to CSV
 */
task xls2Csv(dependsOn: extractFiles) << {
    println '/**                  '
    println '*  "Convert" Action   '
    println '**/                  '

    def inputFile = "$tempDir.path\\${project.properties['hcpcs.xls2Csv.srcFileName']}"
    def outputFile = "$tempDir.path\\${project.properties['hcpcs.xls2Csv.destFileName']}"

    // For storing data into CSV files
    StringBuffer data = new StringBuffer();
    try {
        FileOutputStream fos = new FileOutputStream(outputFile);

        // Get the workbook object for XLS file
        Workbook workbook = WorkbookFactory.create(new FileInputStream(inputFile));
        // Get first sheet from the workbook
        Sheet sheet = workbook.getSheetAt(0);
//        Cell cell;
//        Row row;

        for (int i = 0; i < sheet.getLastRowNum(); i++){
            Row row = sheet.getRow(i);

            if (row!= null){
                for (int j = 0; j < row.getLastCellNum(); j++){
                    Cell cell = row.getCell(j);
                    if (cell == null){
                        data.append(";");
                    } else {
                        cell.setCellType(Cell.CELL_TYPE_STRING)
                        data.append("\"" + cell. toString().trim().replaceAll("\"", "'") + "\"" + ";");
//                        switch (cell.getCellType()) {
//                            case Cell.CELL_TYPE_BOOLEAN:
//                                data.append("\"" + cell.getBooleanCellValue() + "\"" + ";");
//                                break;
//
//                            case Cell.CELL_TYPE_NUMERIC:
//                                data.append("\"" + cell.cgetNumericCellValue() + "\"" + ";");
//                                break;
//
//                            case Cell.CELL_TYPE_STRING:
////                                if (!cell.getStringCellValue().contains("\"")){
//                                println cell.toString()
//                                    data.append("\"" + cell.getStringCellValue().trim().replaceAll("\"", "'") + "\"" + ";");
////                                } else {
////                                    data.append(";");
////                                }
//                                break;
//
//                            case Cell.CELL_TYPE_BLANK:
//                                data.append("" + ";");
//                                break;
//
//                            default:
//                                data.append(cell + ";");
//                        }



                    }
                }
                data.append('\n');
            } else {

            }
        }

        // Iterate through each rows from first sheet
//        Iterator<Row> rowIterator = sheet.iterator();
//        while (rowIterator.hasNext()) {
//            row = rowIterator.next();
//            // For each row, iterate through each columns
//            Iterator<Cell> cellIterator = row.cellIterator();
//            while (cellIterator.hasNext()) {
//                cell = cellIterator.next();
//
//                switch (cell.getCellType()) {
//                    case Cell.CELL_TYPE_BOOLEAN:
//                        data.append("\"" + cell.getBooleanCellValue() + "\"" + ";");
//                        break;
//
//                    case Cell.CELL_TYPE_NUMERIC:
//                        data.append("\"" + cell.getNumericCellValue() + "\"" + ";");
//                        break;
//
//                    case Cell.CELL_TYPE_STRING:
//                        data.append("\"" + cell.getStringCellValue().trim() + "\"" + ";");
//                        break;
//
//                    case Cell.CELL_TYPE_BLANK:
//                        data.append("" + ";");
//                        break;
//
//                    default:
//                        data.append(cell + ";");
//                }
//
//            }
//
//        }

        fos.write(data.toString().getBytes());
        fos.close();
    }
    catch (FileNotFoundException e) {
        e.printStackTrace();
    }
    catch (IOException e) {
        e.printStackTrace();
    }
}

/**
 * Import downloaded and converted data
 */
task importData(dependsOn: xls2Csv) << {
    println '/**                  '
    println '*  "Import" Action   '
    println '**/                  '

    def dataFile = "$tempDir.path\\${project.properties['hcpcs.importData.dataFileName']}"
    println '!!!!' + dataFile
    println '!!!!' + new File(dataFile).exists()
    def logFile = "$tempDir.path\\${project.properties['hcpcs.importData.logFileName']}"
    def discardFile = "$tempDir.path\\${project.properties['hcpcs.importData.discardFileName']}"
    def badFile = "$tempDir.path\\${project.properties['hcpcs.importData.badFileName']}"

    exec {
        println "2) !!!!!!!!!!!!!" + Thread.currentThread().getId()
        executable "sqlldr.exe"
        args "USERID=${project.properties['hcpcs.db.userName']}/${project.properties['hcpcs.db.password']}@${project.properties['hcpcs.db.tnsName']} " +
                "CONTROL=${project.properties['hcpcs.import.controlFilePath']} DATA=$dataFile LOG=$logFile DISCARD=$discardFile BAD=$badFile"
    }
/*
    commandLine "sqlldr.exe"
    args "USERID=$userName/$password CONTROL=$controlFile DATA=$dataFile LOG=$logFile DISCARD=$discardFile"
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
*/
}

/**
 * Load stage
 */
task runLoadStageScript(dependsOn: importData) << {
    println '/**                     '
    println '*  "LoadStage" Action   '
    println '**/                     '

    def log_file = "$tempDir.path\\${project.properties['hcpcs.loadStage.logFileName']}"
    def error_file = "$tempDir.path\\${project.properties['hcpcs.loadStage.errFileName']}"

    def db = [un: project.properties['hcpcs.db.userName'], pw: project.properties['hcpcs.db.password'], tns: project.properties['hcpcs.db.tnsName'],
              sqlfile: project.properties['hcpcs.loadStage.sqlFilePath'], logfile: log_file]
    println "200) *** $log_file $error_file"

    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    println "2) ###" + sqlplus.exitValue()
    println "out> $sout err> $serr"

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0)) {
        throw new GradleException(String.format(project.properties['error.message'], sqlplus.exitValue(), name))
    }
/*
    def userName = 'DEV_HCPCS'
    def password = 'DEV_HCPCS'
    def logFile = path + "\\load_stage.log"
    println "1) ###" + logFile
    def loadStageFile = 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\test1.sql'

    exec {
        println "5) !!!!!!!!!!!!!" + Thread.currentThread().getId()
        executable "sqlplus.exe"
        args "$userName/$password@orcl @$loadStageFile"
        println "1) %%%" + args
    }
*/
}

/**
 * Run Generic Update
 */
task runGenericUpdate(dependsOn: runLoadStageScript) << {
    println '/**                         '
    println '*  "GenericUpdate" Action   '
    println '**/                         '

    def log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.genericUpdate.logFileName']}"
    def error_file = "${tempDir.getPath()}\\${project.properties['hcpcs.genericUpdate.errFileName']}"

    def db = [un: project.properties['hcpcs.db.userName'], pw: project.properties['hcpcs.db.password'], tns: project.properties['hcpcs.db.tnsName'],
              sqlfile: project.properties['hcpcs.genericUpdate.sqlFilePath'], logfile: log_file]
    println "300) *** $log_file $error_file"

    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    println "3) ### ${sqlplus.exitValue()}"
    println "out> $sout err> $serr"

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0)) {
        throw new GradleException(String.format(project.properties['error.message'], sqlplus.exitValue(), name))
    }
/*
    def path = tempDir.getPath()
    def userName = 'DEV_HCPCS'
    def password = 'DEV_HCPCS'
    def logFile = path + "\\generic_update.log"
    println "2) ###" + logFile
    def $genericUpdateFile = "E:\\Vocabulary_Data\\DEV_HCPCS\\update\\test2.sql"

    exec {
        println "6) !!!!!!!!!!!!!" + Thread.currentThread().getId()
        executable "sqlplus.exe"
        args "$userName/$password@orcl @$genericUpdateFile"
        println "2) %%%" + args
    }
*/
}

/*
task runLoadStageScript(type: Exec) {
    def path = tempDir.getPath()
    def userName = 'DEV_HCPCS'
    def password = 'DEV_HCPCS'
    def loadStageFile = 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\02.load_stage.sql'
    def logFile = path + "load_stage.log"

    workDir = tempDir

    commandLine = "sqlplus /nolog $userName/$password @$loadStageFile > $logFile"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}

task runGenericUpdate(type: Exec) {
    def path = tempDir.getPath()
    def userName = 'DEV_HCPCS'
    def password = 'DEV_HCPCS'
    def genericUpdateFile = 'E:\\Vocabulary_Data\\DEV_HCPCS\\update\\02.load_stage.sql'
    def logFile = path + "generic_update.log"

    workDir = tempDir

    commandLine = "sqlplus /nolog $userName/$password @$genericUpdateFile > $logFile"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}

    FileInputStream fis = new FileInputStream(filename);
    Workbook wb = new XSSFWorkbook(fis);
    Sheet sheet = wb.getSheetAt(0);
    for (Row row : sheet) {
        for (Cell cell : row) {
            doSomething(cell.toString())
        }

    }
*/

/**
 * Just bootstrap task
 */
task startUpdate(dependsOn: runGenericUpdate)
