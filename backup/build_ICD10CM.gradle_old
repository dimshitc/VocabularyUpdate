group 'com.sci.vocabulary'
group 'com.sci.vocabulary'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

/*repositories {
    mavenLocal()
    mavenCentral()
}*/

/*dependencies {
    compile 'org.apache.poi:poi:3.9'
    compile 'org.apache.poi:poi-ooxml:3.9'
}*/

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.poi:poi:3.9'
        classpath 'org.apache.poi:poi-ooxml:3.9'
    }
}

import groovy.io.FileType
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Workbook
import org.apache.poi.ss.usermodel.WorkbookFactory
import org.apache.poi.ss.usermodel.Sheet

/***
 * ICD10CM vocabulary update
 * Version 0.0.3
 */

def fileUrl = 'ftp://ftp.cdc.gov/pub/Health_Statistics/NCHS/Publications/ICD10CM/2017/icd10cm_order_2017.txt'
def tempDir = File.createTempDir()
def oldFileName = 'icd10cm_order_2017.txt'
def newFileName = 'icd10cm.txt'

task prepareUpdate << {
    println '*** Create source table action ***'

    def path = tempDir.getPath()
    def _log_file = path + '\\create_source_table.log'
    def _error_file = path + '\\create_source_table.err'

    def db = [un : 'DEV_ICD10CM', pw :'DEV_ICD10CM',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\create_source_tables.sql', logfile: _log_file]
    println '100) *** ' + db.logfile

    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} >${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    println "1) ###" + sqlplus.exitValue()
    println "out> $sout err> $serr"

    File f = new File(_log_file)
    f.write(sout.toString())

    f = new File(_error_file)
    f.write(sout.toString())

    /*if (serr != null && serr.toString().length() > 0) {
        throw new GradleException('Error occurred when "prepareUpdate" executed...')
    }*/


}

task downloadUpdatePack() << {
    println '*** Download action ***'
    println "4) !!!!!!!!!!!!!" + Thread.currentThread().getId()

    /* Downloading file */
    def timeStart = System.currentTimeMillis()
    println '\tDownloading file'
    println '\t\tStored to: ' + tempDir.getPath()
    ant.get(src: fileUrl, dest: tempDir, verbose: true)
    println '\tDownload completed...'

    def timeFinish = System.currentTimeMillis()
    def timeElapsed = timeFinish - timeStart
    println '\tTime elapsed: ' + timeElapsed / 1000 + ' in seconds.'
}

task renameFile() << {
    println '*** Rename action ***'
    println "3) !!!!!!!!!!!!!" + Thread.currentThread().getId()

    def path = tempDir.getPath()
    File fOld = new File(path + "\\" + oldFileName)
    File fNew = new File(path + "\\" + newFileName)

    if (fNew.exists()) {
        throw new IOException("File '$newFileName' already exists!")
    }

    boolean isSuccess = fOld.renameTo(fNew);

    println 'Is file renamed: ' + isSuccess
}

task importData << {
    println '*** Import action ***'

    def path = tempDir.getPath()
    def userName = 'DEV_ICD10CM'
    def password = 'DEV_ICD10CM'

    def controlFile = 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\icd10cm.ctl'
    def dataFile = path + "\\" + newFileName

    println '!!!!' + dataFile
    println '!!!!' + new File(dataFile).exists()
    def logFile = path + "\\" + "icd10cm.log"
    def discardFile = path + "\\" + "icd10cm.dsc"

    exec {
        println "2) !!!!!!!!!!!!!" + Thread.currentThread().getId()
        executable "sqlldr.exe"
        args "USERID=$userName/$password@ORCL CONTROL=$controlFile DATA=$dataFile LOG=$logFile DISCARD=$discardFile"
    }


    //commandLine "sqlldr.exe"

//    args "USERID=$userName/$password CONTROL=$controlFile DATA=$dataFile LOG=$logFile DISCARD=$discardFile"

/*    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
*/
}

task runLoadStageScript << {
    println '*** LoadStage action ***'

    def path = tempDir.getPath()
    def _log_file = path + '\\load_stage.log'
    def _error_file = path + '\\load_stage.err'

    def db = [un : 'DEV_ICD10CM', pw :'DEV_ICD10CM',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\load_stage.sql', logfile: _log_file]
    println '200) *** ' + db.logfile

    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} >${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    println "2) ###" + sqlplus.exitValue()
    println "out> $sout err> $serr"

    File f = new File(_log_file)
    f.write(sout.toString())

    f = new File(_error_file)
    f.write(sout.toString())

    /*if (serr != null && serr.toString().length() > 0) {
        throw new GradleException('Error occurred when "loadStageScript" executed...')
    }*/

/*
    def userName = 'DEV_ICD10CM'
    def password = 'DEV_ICD10CM'
    def logFile = path + "\\load_stage.log"
    println "1) ###" + logFile
    def loadStageFile = 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\test1.sql'

    exec {
        println "5) !!!!!!!!!!!!!" + Thread.currentThread().getId()
        executable "sqlplus.exe"
        args "$userName/$password@orcl @$loadStageFile"
        println "1) %%%" + args
    }
*/
}

task runGenericUpdate << {
    println '*** GenericUpdate action ***'

    def path = tempDir.getPath()
    def _log_file = path + '\\generic_update.log'
    def _error_file = path + '\\generic_update.err'

    def db = [un : 'DEV_ICD10CM', pw :'DEV_ICD10CM',tns :'ORCL', sqlfile: 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\generic_update.sql', logfile: _log_file]
    println '300) *** ' + db.logfile

    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} >${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    println "3) ###" + sqlplus.exitValue()
    println "out> $sout err> $serr"

    File f = new File(_log_file)
    f.write(sout.toString())

    f = new File(_error_file)
    f.write(sout.toString())

    /*if (serr != null && serr.toString().length() > 0) {
        throw new GradleException('Error occurred when "genericUpdate" executed...')
    }*/

/*
    def path = tempDir.getPath()
    def userName = 'DEV_ICD10CM'
    def password = 'DEV_ICD10CM'
    def logFile = path + "\\generic_update.log"
    println "2) ###" + logFile
    def $genericUpdateFile = "E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\test2.sql"

    exec {
        println "6) !!!!!!!!!!!!!" + Thread.currentThread().getId()
        executable "sqlplus.exe"
        args "$userName/$password@orcl @$genericUpdateFile"
        println "2) %%%" + args
    }
*/

}

task startUpdate

/*task runLoadStageScript(type: Exec) {
    def path = tempDir.getPath()
    def userName = 'DEV_ICD10CM'
    def password = 'DEV_ICD10CM'
    def loadStageFile = 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\02.load_stage.sql'
    def logFile = path + "load_stage.log"

    workDir = tempDir

    commandLine = "sqlplus /nolog $userName/$password @$loadStageFile > $logFile"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}

task runGenericUpdate(type: Exec) {
    def path = tempDir.getPath()
    def userName = 'DEV_ICD10CM'
    def password = 'DEV_ICD10CM'
    def genericUpdateFile = 'E:\\Vocabulary_Data\\DEV_ICD10CM\\update\\02.load_stage.sql'
    def logFile = path + "generic_update.log"

    workDir = tempDir

    commandLine = "sqlplus /nolog $userName/$password @$genericUpdateFile > $logFile"

    standardOutput = new ByteArrayOutputStream()

    ext.output = {
        return standardOutput.toString()
    }
}*/

downloadUpdatePack.dependsOn(prepareUpdate)
renameFile.dependsOn(downloadUpdatePack)
importData.dependsOn(renameFile)
runLoadStageScript.dependsOn(importData)
runGenericUpdate.dependsOn(runLoadStageScript)
startUpdate.dependsOn(runGenericUpdate)

/*
    FileInputStream fis = new FileInputStream(filename);
    Workbook wb = new XSSFWorkbook(fis);
    Sheet sheet = wb.getSheetAt(0);
    for (Row row : sheet) {
        for (Cell cell : row) {
            doSomething(cell.toString())
        }

    }
*/