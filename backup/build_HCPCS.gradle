group 'com.sci.vocabulary'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

/*repositories {
    mavenLocal()
    mavenCentral()
}*/

/*dependencies {
    compile 'org.apache.poi:poi:3.9'
    compile 'org.apache.poi:poi-ooxml:3.9'

	compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':material-intro') // add this line to compile some project (for multi-project config)
}*/

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.poi:poi:3.9'
        classpath 'org.apache.poi:poi-ooxml:3.9'
    }
}

import groovy.io.FileType
import org.apache.poi.ss.usermodel.Cell
import org.apache.poi.ss.usermodel.Row
import org.apache.poi.ss.usermodel.Workbook
import org.apache.poi.ss.usermodel.WorkbookFactory
import org.apache.poi.ss.usermodel.Sheet

/***
 * HCPCS Vocabulary update
 * Version 0.0.3
 */
def tempDir = File.createTempDir()
tempDir.deleteOnExit()

/**
 * Just renew user schema and prepare it for further vocabulary update
 */
task fastRecreateSchema(description: project.properties['hcpcs.fastRecreate.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*       '${description}' action started...     *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.fastRecreate.logFileName']}"
    def stream_log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.fastRecreate.streamLogFileName']}"
    def stream_error_file = "${tempDir.getPath()}\\${project.properties['hcpcs.fastRecreate.streamErrFileName']}"

    def db = [un: project.properties['hcpcs.db.userName'],
              pw: project.properties['hcpcs.db.password'],
              tns: project.properties['hcpcs.db.tnsName'],
              sqlfile: project.properties['hcpcs.fastRecreate.sqlFilePath'],
              logfile: log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(stream_log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(stream_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'].toBoolean() && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will prepare user schema for vocabulary update routine.
 * It will create auxiliary table - the "ANWEB_V2" in our case, for example.
 */
task createSourceTable(dependsOn: fastRecreateSchema, description: project.properties['hcpcs.createSourceTable.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*   '${description}' action started...   *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.createSourceTable.logFileName']}"
    def stream_log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.createSourceTable.streamLogFileName']}"
    def stream_error_file = "${tempDir.getPath()}\\${project.properties['hcpcs.createSourceTable.streamErrFileName']}"

    def db = [un: project.properties['hcpcs.db.userName'],
              pw: project.properties['hcpcs.db.password'],
              tns: project.properties['hcpcs.db.tnsName'],
              sqlfile: project.properties['hcpcs.createSourceTable.sqlFilePath'],
              logfile: log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(stream_log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(stream_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'].toBoolean() && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * Task which will download vocabulary update package from source host.
 * This one - 'http://www.cms.gov/Medicare/Coding/HCPCSReleaseCodeSets/' is our case.
 */
task downloadUpdatePack(dependsOn: createSourceTable, description: project.properties['hcpcs.downloadUpdatePack.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*        '${description}' action started...         *"
    println '*                                             *'
    println '***********************************************'

    /* Downloading file */
    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    println '\tDownloading file...'
    println "\t\tStored to: ${tempDir.getPath()}"
    ant.get(src: project.properties['hcpcs.downloadUpdatePack.fileUrl'], dest: tempDir, verbose: true)
    println '\tDownload completed'

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

task extractFiles(dependsOn: downloadUpdatePack, description: project.properties['hcpcs.extractFiles.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*        '${description}' action started...          *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    /* Extracting file */
    def fileList = []
    def dir = tempDir
    dir.eachFile(FileType.FILES) { file ->
        fileList << file
        if (file.getPath().endsWith('zip')) {
            ant.unzip(src: file.getPath(), dest: tempDir, overwrite: false)
            println('\t\tunzipped...')
        }
    }

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will convert a XLS data file to CSV format.
 */
task xls2Csv(dependsOn: extractFiles, description: project.properties['hcpcs.xls2Csv.description']) << {
    println '\n\n**************************************************'
    println '*                                                *'
    println "*  '${description}' action started...  *"
    println '*                                                *'
    println '**************************************************'

    def inputFile = "${tempDir.getPath()}\\${project.properties['hcpcs.xls2Csv.srcFileName']}"
    def outputFile = "${tempDir.getPath()}\\${project.properties['hcpcs.xls2Csv.destFileName']}"

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()
    def timeFinish = timeStart

    // For storing data into CSV files
    StringBuffer data = new StringBuffer();
    try {
        FileOutputStream fos = new FileOutputStream(outputFile);

        // Get the workbook object for XLS file
        Workbook workbook = WorkbookFactory.create(new FileInputStream(inputFile));
        // Get first sheet from the workbook
        Sheet sheet = workbook.getSheetAt(0);
//        Cell cell;
//        Row row;

        for (int i = 0; i < sheet.getLastRowNum(); i++){
            Row row = sheet.getRow(i);

            if (row!= null){
                for (int j = 0; j < row.getLastCellNum(); j++){
                    Cell cell = row.getCell(j);
                    if (cell == null){
                        data.append(";");
                    } else {
                        cell.setCellType(Cell.CELL_TYPE_STRING)
                        data.append("\"" + cell. toString().trim().replaceAll("\"", "'") + "\"" + ";");
//                        switch (cell.getCellType()) {
//                            case Cell.CELL_TYPE_BOOLEAN:
//                                data.append("\"" + cell.getBooleanCellValue() + "\"" + ";");
//                                break;
//
//                            case Cell.CELL_TYPE_NUMERIC:
//                                data.append("\"" + cell.cgetNumericCellValue() + "\"" + ";");
//                                break;
//
//                            case Cell.CELL_TYPE_STRING:
////                                if (!cell.getStringCellValue().contains("\"")){
//                                println cell.toString()
//                                    data.append("\"" + cell.getStringCellValue().trim().replaceAll("\"", "'") + "\"" + ";");
////                                } else {
////                                    data.append(";");
////                                }
//                                break;
//
//                            case Cell.CELL_TYPE_BLANK:
//                                data.append("" + ";");
//                                break;
//
//                            default:
//                                data.append(cell + ";");
//                        }



                    }
                }
                data.append('\n');
            } else {

            }
        }

        // Iterate through each rows from first sheet
//        Iterator<Row> rowIterator = sheet.iterator();
//        while (rowIterator.hasNext()) {
//            row = rowIterator.next();
//            // For each row, iterate through each columns
//            Iterator<Cell> cellIterator = row.cellIterator();
//            while (cellIterator.hasNext()) {
//                cell = cellIterator.next();
//
//                switch (cell.getCellType()) {
//                    case Cell.CELL_TYPE_BOOLEAN:
//                        data.append("\"" + cell.getBooleanCellValue() + "\"" + ";");
//                        break;
//
//                    case Cell.CELL_TYPE_NUMERIC:
//                        data.append("\"" + cell.getNumericCellValue() + "\"" + ";");
//                        break;
//
//                    case Cell.CELL_TYPE_STRING:
//                        data.append("\"" + cell.getStringCellValue().trim() + "\"" + ";");
//                        break;
//
//                    case Cell.CELL_TYPE_BLANK:
//                        data.append("" + ";");
//                        break;
//
//                    default:
//                        data.append(cell + ";");
//                }
//
//            }
//
//        }

        fos.write(data.toString().getBytes());
        fos.close();

        // Finish action checkpoint
        timeFinish = System.currentTimeMillis()

    }
    catch (FileNotFoundException e) {
        e.printStackTrace();
    }
    catch (IOException e) {
        e.printStackTrace();
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * Task performed import CSV data to database
 */
task importData(dependsOn: xls2Csv, description: project.properties['hcpcs.import.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*         '${description}' action started...          *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def dataFile = "${tempDir.getPath()}\\${project.properties['hcpcs.importData.dataFileName']}"
    def logFile = "${tempDir.getPath()}\\${project.properties['hcpcs.importData.logFileName']}"
    def discardFile = "${tempDir.getPath()}\\${project.properties['hcpcs.importData.discardFileName']}"
    def badFile = "${tempDir.getPath()}\\${project.properties['hcpcs.importData.badFileName']}"

    exec {
        executable "sqlldr.exe"
        args "USERID=${project.properties['hcpcs.db.userName']}/${project.properties['hcpcs.db.password']}@${project.properties['hcpcs.db.tnsName']} " +
                "CONTROL=${project.properties['hcpcs.import.controlFilePath']} DATA=$dataFile LOG=$logFile DISCARD=$discardFile BAD=$badFile"
    }

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will run 'Load stage' script.
 * Seems it's is specific for each vocabulary.
 */
task runLoadStage(dependsOn: importData, description: project.properties['hcpcs.loadStage.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*        '${description}' action started...       *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.loadStage.logFileName']}"
    def stream_log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.loadStage.streamLogFileName']}"
    def stream_error_file = "${tempDir.getPath()}\\${project.properties['hcpcs.loadStage.streamErrFileName']}"

    def db = [un: project.properties['hcpcs.db.userName'],
              pw: project.properties['hcpcs.db.password'],
              tns: project.properties['hcpcs.db.tnsName'],
              sqlfile: project.properties['hcpcs.loadStage.sqlFilePath'],
              logfile: log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(stream_log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(stream_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'].toBoolean() && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will run 'Genetic update' script.
 * It's common for all updated vocabularies and located in '\Vocabulary-v5.0\working\generic_update.sql' file.
 */
task runGenericUpdate(dependsOn: runLoadStage, description: project.properties['hcpcs.genericUpdate.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*     '${description}' action started...      *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.genericUpdate.logFileName']}"
    def stream_log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.genericUpdate.streamLogFileName']}"
    def stream_error_file = "${tempDir.getPath()}\\${project.properties['hcpcs.genericUpdate.streamErrFileName']}"

    def db = [un: project.properties['hcpcs.db.userName'],
              pw: project.properties['hcpcs.db.password'],
              tns: project.properties['hcpcs.db.tnsName'],
              sqlfile: project.properties['hcpcs.genericUpdate.sqlFilePath'],
              logfile: log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    System.out.println(sout.toString())

    // Write to logfile
    File f = new File(stream_log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(stream_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'].toBoolean() && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * This task will run scripts which allows to see the vocabulary update results
 */
task checkUpdateResults(dependsOn: runGenericUpdate, description: project.properties['hcpcs.checkUpdateResults.description']) << {
    println '\n\n***********************************************'
    println '*                                             *'
    println "*  '${description}' action started...   *"
    println '*                                             *'
    println '***********************************************'

    // Start action checkpoint
    def timeStart = System.currentTimeMillis()

    def log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.checkUpdateResults.logFileName']}"
    def stream_log_file = "${tempDir.getPath()}\\${project.properties['hcpcs.checkUpdateResults.streamLogFileName']}"
    def stream_error_file = "${tempDir.getPath()}\\${project.properties['hcpcs.checkUpdateResults.streamErrFileName']}"

    def db = [un: project.properties['hcpcs.db.userName'],
              pw: project.properties['hcpcs.db.password'],
              tns: project.properties['hcpcs.db.tnsName'],
              sqlfile: project.properties['hcpcs.checkUpdateResults.sqlFilePath'],
              logfile: log_file]
    def sout = new StringBuilder(), serr = new StringBuilder()
    def sqlplus= """sqlplus.exe ${db.un}/${db.pw}@${db.tns} @${db.sqlfile} ${db.logfile}""".execute()
    sqlplus.consumeProcessOutput(sout, serr)
    sqlplus.waitFor()

    // Finish action checkpoint
    def timeFinish = System.currentTimeMillis()

    // Write to console
    System.out.println(sout.toString())

    // Write to log file
    File f = new File(stream_log_file)
    f.write(sout.toString())

    // Write to error file
    f = new File(stream_error_file)
    f.write(sout.toString())

    /* Check for errors */
    if (project.properties['stop.on.error'].toBoolean() && (sqlplus.exitValue() != 0 || (serr != null && serr.toString().length() > 0))) {
        throw new GradleException(String.format(project.properties['error.message.with.code'], sqlplus.exitValue(), name))
    }

    // Measure time execution
    def timeElapsed = (timeFinish - timeStart) / 1000
    println "\tTime elapsed: ${timeElapsed} seconds."

    println "*** '${description}' action done ***"
}

/**
 * Bootstrap action
 *
 * TODO: Needs to find solution to measure whole task chain execution.
 * TODO: This one via doFirst/doLast actions isn't working.
 */
task startUpdate(dependsOn: checkUpdateResults, description: project.properties['hcpcs.startUpdate.description']) {
    // Start action checkpoint
    def timeStart

    doFirst {
        println '***********************************************'
        println '*                                             *'
        println "*  '${description}' action started...   *"
        println '*                                             *'
        println '***********************************************'

        timeStart = System.currentTimeMillis()
    }
    doLast {
        // Finish action checkpoint
        def timeFinish = System.currentTimeMillis()

        // Measure time execution
        def timeElapsed = (timeFinish - timeStart) / 1000
        println "Total time elapsed: ${timeElapsed} seconds."

        println "*** '${description}' action done ***"
    }
}